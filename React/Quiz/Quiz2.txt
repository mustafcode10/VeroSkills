Question 1 / 4
What is Vite primarily designed for?

Database management
Backend services
Faster frontend development
Mobile application development

Answer => Faster frontend development

Question 2 / 4
What is a significant advantage of the createRoot API in React?

It allows you to style React components
It offers capabilities around concurrent rendering
It automatically saves the state in local storage
It handles API calls without any additional libraries

Answer => It offers capabilities around concurrent rendering.

Question 3 / 4
Which of the following best describes the relationship between props and state in a React component?

Both props and state are read-only
Props are read-only while state is mutable
State is read-only while props can be changed inside a component
Both props and state can be modified internally and externally

Answer => Props are read-only while state is mutable

Question 4 / 4
When might a developer use props.children in React?

To access the children elements nested within a custom component
To handle form submission events
To manage the local state of a component
To make API calls and fetch data

Answer => To access the children elements nested within a custom component


Question 1 / 5
Which of the following hooks is specifically used to initialize and manage state in a React component?

useEffect
useContext
useRef
useState

Answer => useState

Question 2 / 5
When updating state using the useState hook, what advantage does using a callback function provide?

It ensures the state always gets initialized to its initial value.
It allows the state to skip updates and optimize performance.
It guarantees that the update function uses the most recent state value.
It automatically triggers a rerender of the parent component.

Answer => It guarantees that the update function uses the most recent state value.

Question 3 / 5
Which method is recommended when you need to update an object in the state without losing its other properties?

Spreading the previous state and then overriding specific properties
Directly modifying the object
Using Array's `push` method
Using Object's `assign` method

Answer => Spreading the previous state and then overriding specific properties

Question 4 / 5
Given the initial state declaration const [count, setCount] = useState(0);, how would you correctly update the count to increment by one?

`count++`
`setCount(count + 1)`
`setCount(prevCount++)`
`setCount(prevCount => prevCount + 1)`

Answer => `setCount(prevCount => prevCount + 1)`

Question 5 / 5
Imagine you have an array in the state and you want to add a new item to it. What's the best approach to ensure immutability?

`userState.push(newUser)`
`setUserState(userState + newUser)`
`setUserState([...userState, newUser])`
`userState[userState.length] = newUser`

Answer =>  `setUserState([...userState, newUser])`


Question 1 / 6
What does the term "prop drilling" refer to in React?

Creating new components for every prop passed
The practice of passing props through intermediate components to deeply nested components
Injecting props directly into the state
Drilling down into props to extract nested values

Answer => The practice of passing props through intermediate components to deeply nested components

Question 2 / 6
What is the primary purpose of the dependency array in the useEffect hook?

To store data fetched from an API call
To catch any errors during the component render
To define the default state of the component
To determine when the effect should re-run

Answer => To determine when the effect should re-run


Question 3 / 6
Why might you use a cleanup function in the useEffect hook?

To prevent memory leaks, for example, by clearing up subscriptions or timers
To run the effect logic
To make an API call
To render UI components

Answer => To prevent memory leaks, for example, by clearing up subscriptions or timers


Question 4 / 6
Which of the following is a common use case for the useEffect hook?

Updating the DOM directly
Manipulating React state outside the component
Making asynchronous requests to fetch data from a server
Synchronizing state and props

Answer => Making asynchronous requests to fetch data from a server


Question 5 / 6
Why might you want to use Context in a React application?


To make an API call to a remote server
To share data easily across different levels of the component tree without passing props down manually
To access the local storage of a browser
To speed up the rendering process of a component

Answer => To share data easily across different levels of the component tree without passing props down manually


Question 6 / 6
How do you consume the data provided by a context in a child component?

Invoking the `createContext()` method within the component
Using the `useState()` hook to access the context data
Wrapping the component in a higher-order component
Using the `useContext()` hook with the appropriate context object

Answer => Using the `useContext()` hook with the appropriate context object


Question 1 / 5
What primary problem does React Suspense aim to solve?

Handling and displaying UI while components asynchronously load data
Component-based architecture
State management
Debugging React applications

Answer => Handling and displaying UI while components asynchronously load data

Question 2 / 5
In the context of React Suspense, what is the role of the fallback prop?

Capture and display any errors during rendering
Define a default set of props for a component
Rollback to a previous version of a component if the current one fails
Specify what should be displayed while a component is being lazily loaded

Answer => Specify what should be displayed while a component is being lazily loaded


Question 3 / 5
Which of the following is the correct way to utilize React's lazy function to import a component?

`import MyComponent from 'react-lazy!./MyComponent'`
`const MyComponent = require('react-lazy!./MyComponent')`
`const MyComponent = lazy(() => import('./MyComponent'))`
`const MyComponent = import('./MyComponent').lazy()`


Answer => `const MyComponent = lazy(() => import('./MyComponent'))`


Question 4 / 5
What is the primary purpose of React's createPortal()?

To create a new React component
To render components outside of the parent DOM hierarchy
To speed up the rendering process
To enhance the accessibility of components

Answer => To render components outside of the parent DOM hierarchy


Question 5 / 5
When creating a modal dialog with a portal in React, which of the following considerations is crucial for a good user experience?

Ensure that the modal supports deep linking
The modal's DOM elements should be responsive
Ensure that the modal follows proper accessibility guidelines
Provide multiple themes for the modal to support different UI looks

Answer => Ensure that the modal follows proper accessibility guidelines


Question 1 / 5
What is the primary purpose of the useRef() Hook in form management within React?

Update the state of the form
Directly access a DOM element without re-rendering
Manage form submission asynchronously
Validate form input in real-time

Answer => Directly access a DOM element without re-rendering


Question 2 / 5
When using useRef() to access an input element, how can you retrieve the current value of that input?

useRef().value
useRef().current
useRef.current.value
useRef.value()

Answer => useRef.current.value

Question 3 / 5
What are Compound Components in React?

Components that are composed of other smaller components to form a complete UI
Components that use complex state management techniques
Components that can be combined with other frameworks or libraries
Components that provide complex animations and transitions

Answer => Components that are composed of other smaller components to form a complete UI

Question 4 / 5
What is a controlled component in React?

A component that does not manage its own state.
A component where form data is handled by the DOM.
A component where form data is controlled by the component's state.
A component that cannot be modified after rendering.

Answer => A component where form data is controlled by the component's state.

Question 5 / 5
What would be a typical use case for using refs in uncontrolled components?

Store the previous value of an input for comparison
Control the input's value directly through React state
Sync the input's value with another UI element in real-time
Access the DOM element's value directly for form submission

Answer => Access the DOM element's value directly for form submission







